// Other parsers
// https://github.com/mdaines/viz-js/blob/54ebb476d2d0fb4a3d1f1b6bd77162876c6b6697/packages/lang-dot/src/dot.grammar#L97

@top Program {
    module
}

@tokens {
    varIdentTokenFirst { ![-?!.\\;,#\"\]\[)(}{><| \t\n\r:/*=×→≡↦] }
    varIdenTokenNext { ![\\;,#\"\]\[)(}{><| \t\n\r] }
    varIdentToken {  varIdentTokenFirst varIdenTokenNext* }
        
    LineComment { "--" ![\n]* }
    BlockComment { "{-" blockCommentRest }
    blockCommentRest { ![-] blockCommentRest | "-" blockCommentAfterDash }
    blockCommentAfterDash { "}" | "-" blockCommentAfterDash | ![{-] blockCommentRest }
    
    String { '"' (![\\"] | "\\" _)* '"' }
    string { String }

    space { $[ \t\r\n]+ }
}

@skip { space | LineComment | BlockComment }

Module { languageDecl command*  }
module { Module }

HoleIdent { "?" }
holeIdent { HoleIdent }

VarIdent { varIdentToken }
varIdent { VarIdent }
varIdents { varIdent+ }

LanguageDecl { "#lang" language }
languageDecl { LanguageDecl }

Rzk1 { "rzk-1" }
language { Rzk1 }

CommandSetOption { "#set-option" string "=" string }
CommandUnsetOption { "#unset-option" string "=" string }

CommandCheck { "#check" term ":" term }

CommandCompute { "#compute" term }
CommandComputeWHNF { "#compute-whnf" term }
CommandComputeNF { "#compute-nf" term }

CommandPostulate { "#postulate" varIdent declUsedVars params ":" term }
CommandPostulateNoParams { "#postulate" varIdent declUsedVars ":" term }

CommandAssume {
      "#assume" varIdents ":" term
    | commandVariable
    | commandVariables
}
// TODO Is this equivalent to `define`d functions?
commandVariable { "#variable" varIdent ":" term }
commandVariables { "#variables" varIdents ":" term }

CommandSection { "#section" sectionName }
CommandSectionEnd { "#end" sectionName }

CommandDefine {
    "#define" varIdent declUsedVars params ":" term ":=" term 
    | commandDefineNoParams
    | commandDef
    | commandDefNoParams
}
commandDefineNoParams { "#define" varIdent declUsedVars ":" term ":=" term }
commandDef { "#def" varIdent declUsedVars params ":" term ":=" term }
commandDefNoParams { "#def" varIdent declUsedVars ":" term ":=" term }

command {
    ( CommandSetOption
    | CommandUnsetOption
    | CommandCheck
    | CommandCompute
    | CommandComputeWHNF
    | CommandComputeNF
    | CommandPostulate
    | CommandPostulateNoParams
    | CommandAssume
    | CommandSection
    | CommandSectionEnd
    | CommandDefine
    )
}

DeclUsedVars { 
      @specialize<varIdentToken, "uses"> "(" varIdents ")" 
    | noDeclUsedVars 
}
noDeclUsedVars { "" }
declUsedVars { DeclUsedVars }

NoSectionName  { "" }
SomeSectionName { varIdent }
sectionName { 
      NoSectionName 
    | SomeSectionName }

// Patterns
PatternUnit { @specialize<varIdentToken, "unit"> }
PatternVar { varIdent }
PatternPair { "(" pattern "," pattern ")" }
pattern {
      PatternUnit
    | PatternVar
    | PatternPair
}
// TODO why separator for nonempty is ""?
// we can have `unitunit` in `ParamPatternType`
patterns { pattern+ }

// Parameter introduction (for lambda abstractions)
ParamPattern { pattern }
ParamPatternType { "(" patterns ":" term ")" }
ParamPatternShape { "(" patterns ":" term "|" term ")" }
ParamPatternShapeDeprecated { "{" pattern ":" term "|" term "}" }

param {
      ParamPattern
    | ParamPatternType
    | ParamPatternShape
    | ParamPatternShapeDeprecated
}
// TODO why ""?
params { param+ }

// Parameter declaration for functions and extension types
ParamType { term6 }
ParamTermType { "(" term ":" term ")" }
ParamTermShape { "(" term ":" term "|" term ")" }
ParamTermTypeDeprecated { "{" pattern ":" term "}" } 
ParamVarShapeDeprecated { "{" "(" pattern ":" term ")" "|" term "}" }
paramVarShapeDeprecated { "{" pattern ":" term "|" term "}" }

paramDecl {
      ParamType
    | ParamTermType
    | ParamTermShape
    | ParamTermTypeDeprecated
    | ParamVarShapeDeprecated
    | paramVarShapeDeprecated
}


Restriction { term "↦" term }
restriction { Restriction | ASCII_Restriction }

// TODO use this when see [Restriction]
restrictions { restriction ("," restriction)* }

// Universes
Universe { @specialize<varIdentToken, "U"> }
UniverseCube { @specialize<varIdentToken, "Cube"> }
UniverseTope { @specialize<varIdentToken, "TOPE"> }

// Cubes
CubeUnit { @specialize<varIdentToken, "1"> }
CubeUnitStar { @specialize<varIdentToken, "*₁"> }
Cube2 { @specialize<varIdentToken, "2"> }
Cube2_0 { @specialize<varIdentToken, "0₂"> }
Cube2_1 { @specialize<varIdentToken, "1₂"> }
CubeProduct { term5 "×" term6 }

// Topes
TopeTop { @specialize<varIdentToken, "⊤"> }
TopeBottom { @specialize<varIdentToken, "⊥"> }
TopeEQ { term5 "≡" term5 }
TopeLEQ { @specialize<varIdentToken, "≤"> }
TopeAnd { @specialize<varIdentToken, "∧"> }
TopeOr { @specialize<varIdentToken, "∨"> }

// Tope disjunction elimination
RecBottom { @specialize<varIdentToken, "recBot"> }
RecOr { @specialize<varIdentToken, "recOR"> "(" restrictions ")" }
RecOrDeprecated { @specialize<varIdentToken, "recOR"> "(" term "," term "," term "," term ")" }

// Types
TypeFun { paramDecl "→" term1 }
TypeSigma { @specialize<varIdentToken, "Σ"> "(" pattern ":" term ")" "," term1 }
TypeUnit { @specialize<varIdentToken, "Unit"> }
TypeId { term2 "=_{" term "}" term2 }
TypeIdSimple { term2 "=" term2 }
TypeRestricted { term6 "[" restrictions "]" }
TypeExtensionDeprecated { "<" paramDecl "→" term ">" }

// Terms
App { term6 term7  }
Lambda { "\\" params "→" term1  }
Pair { "(" term "," term ")"  }
First { @specialize<varIdentToken, "π₁"> term7  }
Second { @specialize<varIdentToken, "π₂"> term7  }
// FIXME same as PatternUnit
Unit { @specialize<varIdentToken, "unit">  }
Refl { @specialize<varIdentToken, "refl"> }
ReflTerm { @specialize<varIdentToken, "refl_{"> term "}"  }
ReflTermType { @specialize<varIdentToken, "refl_{"> term ":" term "}"  }
IdJ { @specialize<varIdentToken, "idJ"> "(" term "," term "," term "," term "," term "," term ")"  }

// Variables and holes
Hole { holeIdent }
Var { varIdent }

// Miscellaneous
TypeAsc { term2 @specialize<varIdentToken, "as"> term1 }

ascii_CubeProduct { term5 @specialize<varIdentToken, "*"> term6 }

ASCII_CubeUnitStar { @specialize<varIdentToken, "*_1"> }
ASCII_Cube2_0 { @specialize<varIdentToken, "0_2"> }
ASCII_Cube2_1 { @specialize<varIdentToken, "1_2"> }

ASCII_TopeTop { @specialize<varIdentToken, "TOP"> }
ASCII_TopeBottom { @specialize<varIdentToken, "BOT"> }
ASCII_TopeEQ { term5 "===" term5 }
ASCII_TopeLEQ { term5 "<=" term5 }
ASCII_TopeAnd { term4 "/\\" term3 }
ASCII_TopeOr { term3 "\\/" term2 }
 
ASCII_TypeFun { paramDecl "->" term1 }
ASCII_TypeSigma { @specialize<varIdentToken, "Sigma"> "(" pattern ":" term ")" "," term1 }

ASCII_Lambda { "\\" params "->" term1 }
ASCII_Restriction { term "|->" term }

ASCII_TypeExtensionDeprecated { "<" paramDecl "->" term ">" }
ASCII_First { @specialize<varIdentToken, "first"> term7 }
ASCII_Second { @specialize<varIdentToken, "second"> term7 }

// Alternative Unicode syntax rules
// \sum
unicode_TypeSigmaAlt { @specialize<varIdentToken, "∑"> "(" pattern ":" term ")" "," term1 }

// coercions *add* rules

term { 
  TypeAsc
| term1 
}

term1 {
      TypeFun
    | TypeSigma
    | TypeId
    | TypeIdSimple
    | Lambda
    | ASCII_TypeFun
    | ASCII_TypeSigma
    | ASCII_Lambda
    | unicode_TypeSigmaAlt
    | term2
}

term2 {
      TopeOr
    | ASCII_TopeOr
    | term3
}

term3 {
      TopeAnd
    | ASCII_TopeAnd
    | term4
}

term4 {
      TopeEQ
    | TopeLEQ
    | ASCII_TopeEQ
    | ASCII_TopeLEQ
    | term5
}

term5 {
      CubeProduct
    | ascii_CubeProduct
    | term6
}

term6 {
      TypeRestricted
    | App
    | First
    | Second
    | ASCII_First
    | ASCII_Second
    | term7
}

term7 {
      Universe
    | UniverseCube
    | UniverseTope
    | CubeUnit
    | CubeUnitStar
    | Cube2
    | Cube2_0
    | Cube2_1
    | TopeTop
    | TopeBottom
    | RecBottom
    | RecOr
    | RecOrDeprecated
    | TypeUnit
    | TypeExtensionDeprecated
    | Pair
    | Unit
    | Refl
    | ReflTerm
    | ReflTermType
    | IdJ
    | Hole
    | Var
    | ASCII_CubeUnitStar
    | ASCII_Cube2_0
    | ASCII_Cube2_1
    | ASCII_TopeTop
    | ASCII_TopeBottom
    | ASCII_TypeExtensionDeprecated
    | "(" term ")"
}
