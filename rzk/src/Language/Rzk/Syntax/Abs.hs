-- File generated by the BNF Converter (bnfc 2.9.4.1).

{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language Syntax.

module Language.Rzk.Syntax.Abs where

import Prelude (String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

import qualified Data.Data    as C (Data, Typeable)
import qualified GHC.Generics as C (Generic)

data Module = Module LanguageDecl [Command]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data LanguageDecl = LanguageDecl Language
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Language = Rzk1 | Rzk2
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Command
    = CommandSetOption String String
    | CommandUnsetOption String
    | CommandDefine VarIdent [Param] Term Term
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Pattern
    = PatternWildcard
    | PatternVar VarIdent
    | PatternPair Pattern Pattern
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Param
    = ParamPattern Pattern
    | ParamPatternType Pattern Term
    | ParamPatternShape Pattern Term Term
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ParamDecl
    = ParamType Term
    | ParamWildcardType Term
    | ParamVarType Pattern Term
    | ParamVarShape Pattern Term Term
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Restriction = Restriction Term Term
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Term
    = Universe
    | UniverseCube
    | UniverseTope
    | CubeUnit
    | CubeUnitStar
    | Cube2
    | Cube2_0
    | Cube2_1
    | CubeProduct Term Term
    | TopeTop
    | TopeBottom
    | TopeEQ Term Term
    | TopeLEQ Term Term
    | TopeAnd Term Term
    | TopeOr Term Term
    | RecBottom
    | RecOr [Restriction]
    | TypeFun ParamDecl Term
    | TypeSigma Pattern Term Term
    | TypeId Term Term Term
    | TypeIdSimple Term Term
    | TypeRestricted Term [Restriction]
    | App Term Term
    | Lambda [Param] Term
    | Pair Term Term
    | First Term
    | Second Term
    | Refl
    | ReflTerm Term
    | ReflTermType Term Term
    | IdJ Term Term Term Term Term Term
    | Hole HoleIdent
    | Var VarIdent
    | TypeAsc Term Term
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

commandDefineNoParams :: VarIdent -> Term -> Term -> Command
commandDefineNoParams = \ x ty term -> CommandDefine x [] ty term

paramVarType :: VarIdent -> Term -> ParamDecl
paramVarType = \ var cube -> ParamVarType (PatternVar var) cube

paramVarShape :: Pattern -> Term -> Term -> ParamDecl
paramVarShape = \ pat cube tope -> ParamVarShape pat cube tope

recOr :: Term -> Term -> Term -> Term -> Term
recOr = \ psi phi a b -> RecOr [Restriction psi a, Restriction phi b]

typeExtension :: ParamDecl -> Term -> Term
typeExtension = \ param ret -> TypeFun param ret

unicode_TypeFun :: ParamDecl -> Term -> Term
unicode_TypeFun = \ arg ret -> TypeFun arg ret

unicode_TypeSigma :: Pattern -> Term -> Term -> Term
unicode_TypeSigma = \ pat fst snd -> TypeSigma pat fst snd

unicode_TypeSigmaAlt :: Pattern -> Term -> Term -> Term
unicode_TypeSigmaAlt = \ pat fst snd -> TypeSigma pat fst snd

newtype VarIdent = VarIdent String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

newtype HoleIdent = HoleIdent String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

